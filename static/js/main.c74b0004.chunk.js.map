{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","mappedTasks","tasks","map","t","key","id","type","checked","isDone","onClick","removeTask","addTask","trim","value","onChange","e","currentTarget","onKeyPress","charCode","changeFilter","App","v1","setTasks","filter","setFilter","tasksForTodolist","className","taskID","result","task","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAYaA,G,MAAW,SAACC,GAErB,MAAwBC,mBAAiB,IAAzC,mBAAKC,EAAL,KAAYC,EAAZ,KAEIC,EAAcJ,EAAMK,MAAMC,KAAI,SAAAC,GAIjC,OAAO,wBAAIC,IAAKD,EAAEE,IACf,2BAAOC,KAAK,WAAWC,QAASJ,EAAEK,SAClC,8BAAOL,EAAEL,OACT,4BAAQW,QALe,WAAOb,EAAMc,WAAWP,EAAEE,MAKjD,SAIEM,EAAU,WACS,KAAjBb,EAAMc,SACNhB,EAAMe,QAAQb,GACdC,EAAS,MAkBjB,OACI,6BACI,4BAAKH,EAAME,OACX,6BACI,2BAAOe,MAAOf,EACdgB,SAnBY,SAACC,GACrBhB,EAASgB,EAAEC,cAAcH,QAmBjBI,WAhBc,SAACF,GACJ,KAAfA,EAAEG,UACFP,OAeI,4BAAQF,QAASE,GAAjB,MAEHX,EACD,6BACI,4BAAQS,QAfM,WAAOb,EAAMuB,aAAa,SAexC,OACA,4BAAQV,QAdS,WAAOb,EAAMuB,aAAa,YAc3C,UACA,4BAAQV,QAhBY,WAAOb,EAAMuB,aAAa,eAgB9C,iBCEDC,MAlDf,WAEI,MAAwBvB,mBAAS,CAC7B,CAACQ,GAAIgB,cAAMvB,MAAO,WAAYU,QAAQ,GACtC,CAACH,GAAIgB,cAAMvB,MAAO,UAAWU,QAAQ,GACrC,CAACH,GAAIgB,cAAMvB,MAAO,QAASU,QAAQ,GACnC,CAACH,GAAIgB,cAAMvB,MAAO,KAAMU,QAAQ,KAJpC,mBAAKP,EAAL,KAAYqB,EAAZ,KAqBA,EAA0BzB,mBAA2B,OAArD,mBAAK0B,EAAL,KAAaC,EAAb,KAEIC,EAAmBxB,EAEvB,OAAOsB,GACH,IAAK,SACDE,EAAmBA,EAAiBF,QAAO,SAAApB,GAAC,OAAKA,EAAEK,UACnD,MAEJ,IAAK,YACDiB,EAAmBA,EAAiBF,QAAO,SAAApB,GAAC,OAAIA,EAAEK,UAClD,MAEJ,QAASiB,EAAmBxB,EAGhC,OACI,yBAAKyB,UAAU,OACZ,kBAAC,EAAD,CAAU5B,MAAO,OACjBG,MAAOwB,EACPf,WAlCP,SAAoBiB,GAChB,IAAIC,EAAS3B,EAAMsB,QAAO,SAAApB,GAAC,OAAIA,EAAEE,KAAOsB,KACxCL,EAASM,IAiCNT,aA9BP,SAAsBI,GAClBC,EAAUD,IA8BPZ,QA3BP,SAAiBb,GACb,IAAI+B,EAAO,CAACxB,GAAIgB,cAAMvB,MAAOA,EAAOU,QAAQ,GAC5Cc,EAAS,CAACO,GAAF,mBAAW5B,UCrBP6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c74b0004.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\nimport { FilterValuesType, TaskType } from \"./App\";\r\nimport { MapTasks } from \"./MapTasks\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string) => void\r\n    changeFilter: (filter: FilterValuesType) => void\r\n    addTask: (title: string) => void\r\n}\r\n\r\nexport const Todolist = (props: PropsType) => {\r\n    \r\n    let [title, setTitle] = useState<string>(\"\")\r\n    \r\n    let mappedTasks = props.tasks.map(t => {\r\n\r\n        const onClickHandler = () => {props.removeTask(t.id)}\r\n\r\n     return <li key={t.id}>\r\n        <input type=\"checkbox\" checked={t.isDone}/>\r\n        <span>{t.title}</span>\r\n        <button onClick={onClickHandler}>x</button>\r\n    </li>\r\n    })\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(title);\r\n            setTitle(\"\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    const onAllClickHandler = () => {props.changeFilter(\"all\")}\r\n    const onCompletedClickHandler = () => {props.changeFilter(\"completed\")}\r\n    const onActiveClickHandler = () => {props.changeFilter(\"active\")}\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input value={title} \r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}/>\r\n                <button onClick={addTask}>+</button>\r\n            </div>\r\n            {mappedTasks}\r\n            <div>\r\n                <button onClick={onAllClickHandler}>All</button>\r\n                <button onClick={onActiveClickHandler}>Active</button>\r\n                <button onClick={onCompletedClickHandler}>Completed</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTasks] = useState([\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"Angular\", isDone: false},\r\n        {id: v1(), title: \"React\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true}\r\n    ])\r\n\r\n    function removeTask(taskID: string) {\r\n        let result = tasks.filter(t => t.id !== taskID)\r\n        setTasks(result);\r\n    }\r\n\r\n    function changeFilter(filter: FilterValuesType) {\r\n        setFilter(filter);\r\n    }\r\n\r\n    function addTask(title: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        setTasks([task, ...tasks])\r\n    }\r\n\r\n    let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n    let tasksForTodolist = tasks;\r\n\r\n    switch(filter) {\r\n        case \"active\": {\r\n            tasksForTodolist = tasksForTodolist.filter(t => !t.isDone) \r\n            break\r\n        }\r\n        case \"completed\": {\r\n            tasksForTodolist = tasksForTodolist.filter(t => t.isDone) \r\n            break\r\n        }\r\n        default: tasksForTodolist = tasks;\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n           <Todolist title={\"deff\"} \r\n           tasks={tasksForTodolist} \r\n           removeTask={removeTask} \r\n           changeFilter={changeFilter}\r\n           addTask={addTask}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}