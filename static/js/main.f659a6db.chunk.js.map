{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","setTodolistEntityStatusAC","entityStatus","setTaskEntityStatusAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f659a6db.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\nimport { RequestStatusType } from '../app/app-reducer';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a51c385e-38b4-45b2-933a-739b6104467f'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n} \r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type ErrorType = string | null;\r\nconst initialState = {\r\n    status: \"loading\" as RequestStatusType,\r\n    error: null as ErrorType\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\": {\r\n            return {...state, status: action.status}\r\n        } \r\n        case \"APP/SET-ERROR\": {\r\n            return {...state, error: action.error}\r\n        } \r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\ntype ActionsType = SetAppStatusACType | SetAppErrorACType;\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: \"APP/SET-STATUS\",\r\n        status\r\n    } as const\r\n}\r\n\r\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport const setAppErrorAC = (error: ErrorType) => {\r\n    return {\r\n        type: \"APP/SET-ERROR\",\r\n        error\r\n    } as const\r\n}\r\n\r\nexport type SetAppErrorACType = ReturnType<typeof setAppErrorAC>","import { setAppErrorAC, SetAppErrorACType, setAppStatusAC, SetAppStatusACType } from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n   if (data.messages.length) {\r\n       dispatch(setAppErrorAC(data.messages[0]))\r\n   } else {\r\n       dispatch(setAppErrorAC('Some error occurred'))\r\n   }\r\n   dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n   dispatch(setAppErrorAC(error.message))\r\n   dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorACType | SetAppStatusACType>","import { todolistsAPI, TodolistType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { RequestStatusType, setAppErrorAC, SetAppErrorACType, setAppStatusAC, SetAppStatusACType } from '../../app/app-reducer'\r\nimport { handleServerNetworkError } from '../../utils/error-utils'\r\nimport { handleServerAppError } from './../../utils/error-utils';\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{ ...action.todolist, filter: 'all', entityStatus: \"succeeded\" }, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, title: action.title } : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, filter: action.filter } : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: \"succeeded\" }))\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.entityStatus } : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: 'SET-TODOLISTS', todolists } as const)\r\n\r\nexport const setTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: \"CHANGE-TODOLIST-ENTITY-STATUS\",\r\n        id,\r\n        entityStatus\r\n    } as const\r\n}\r\n\r\nexport type SetTodolistEntityStatusACType = ReturnType<typeof setTodolistEntityStatusAC>\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    dispatch(setTodolistsAC(res.data));\r\n                    dispatch(setAppStatusAC(\"succeeded\"));\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        dispatch(setTodolistEntityStatusAC(todolistId, \"loading\"))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId));\r\n                    dispatch(setAppStatusAC(\"succeeded\"));\r\n                    dispatch(setTodolistEntityStatusAC(todolistId, \"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item));\r\n                    dispatch(setAppStatusAC(\"succeeded\"));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        dispatch(setTodolistEntityStatusAC(id, \"loading\"));\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(id, title));\r\n                    dispatch(setAppStatusAC(\"succeeded\"));\r\n                    dispatch(setTodolistEntityStatusAC(id, \"succeeded\"));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppStatusACType\r\n    | SetAppErrorACType\r\n    | SetTodolistEntityStatusACType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskDomainType, TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { RequestStatusType, setAppErrorAC, SetAppErrorACType, setAppStatusAC, SetAppStatusACType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from './../../utils/error-utils';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [{ ...action.task, entityStatus: \"succeeded\" }, ...state[action.task.todoListId]] }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? { ...t, ...action.model } : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = { ...state }\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = { ...state }\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"CHANGE-TASK-ENTITY-STATUS\": {\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(task => task.id === action.id ? {...task, entityStatus: action.entityStatus} : task)};\r\n        }\r\n        case 'SET-TASKS':\r\n            return { ...state, [action.todolistId]: action.tasks.map(task => ({ ...task, entityStatus: \"succeeded\" })) }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({ type: 'REMOVE-TASK', taskId, todolistId } as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({ type: 'UPDATE-TASK', model, todolistId, taskId } as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({ type: 'SET-TASKS', tasks, todolistId } as const)\r\nexport const setTaskEntityStatusAC = (todolistId: string, id: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: \"CHANGE-TASK-ENTITY-STATUS\",\r\n        id,\r\n        todolistId,\r\n        entityStatus\r\n    } as const\r\n}\r\n\r\nexport type SetTaskEntityStatusACType = ReturnType<typeof setTaskEntityStatusAC>\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            if (res.data.error === null) {\r\n                const tasks = res.data.items;\r\n                const action = setTasksAC(tasks, todolistId);\r\n                dispatch(action);\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(setTaskEntityStatusAC(todolistId, taskId, \"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = removeTaskAC(taskId, todolistId);\r\n                dispatch(action);\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n                dispatch(setTaskEntityStatusAC(todolistId, taskId, \"succeeded\"));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        dispatch(setTaskEntityStatusAC(todolistId, taskId, \"loading\"))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId);\r\n                    dispatch(action);\r\n                    dispatch(setAppStatusAC(\"succeeded\"));\r\n                    dispatch(setTaskEntityStatusAC(todolistId, taskId, \"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppStatusACType\r\n    | SetAppErrorACType\r\n    | SetTaskEntityStatusACType\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        if (!props.disabled) {\r\n            setEditMode(true);\r\n            setTitle(props.value);\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskDomainType, TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskDomainType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} disabled={props.task.entityStatus === \"loading\"}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { TaskDomainType, TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { RequestStatusType } from '../../../app/app-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    entityStatus: RequestStatusType\r\n    title: string\r\n    tasks: Array<TaskDomainType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} disabled={props.entityStatus === \"loading\"}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                entityStatus={tl.entityStatus}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { ErrorType, setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n   props, ref) {\r\n   return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n   const [open, setOpen] = useState(true);\r\n   const dispatch = useDispatch();\r\n   const error = useSelector<AppRootStateType, ErrorType>(state => state.app.error)\r\n\r\n   const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n       if (reason === 'clickaway') {\r\n           return;\r\n       }\r\n       dispatch(setAppErrorAC(null));\r\n   };\r\n\r\n   return (\r\n       <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n           <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n               {error}\r\n           </Alert>\r\n       </Snackbar>\r\n   );\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport { Menu } from '@mui/icons-material';\r\nimport { LinearProgress } from '@mui/material';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './store';\r\nimport { RequestStatusType } from './app-reducer';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\r\n\r\n\r\nfunction App() {\r\n    let status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}