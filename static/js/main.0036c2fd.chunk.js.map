{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","value","setValue","error","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","title","setTitle","autoFocus","onBlur","onDoubleClick","Todolist","mappedTasks","tasks","map","t","key","id","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","changeTaskTitle","removeTask","Delete","changeTodolistTitle","deleteTodolist","addTask","Button","changeFilter","filter","App","todolistID1","v1","todolistID2","todolists","setTodolits","setTasks","taskID","todolistID","todolistTasks","todolist","find","task","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodolistID","spacing","tl","allTasksForTodolist","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0036c2fd.chunk.js","sourcesContent":["import { Button, IconButton, TextField } from \"@material-ui/core\";\r\nimport { AddBox } from \"@material-ui/icons\";\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    let [value, setValue] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    let onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value);\r\n    }\r\n\r\n    let addItem = () => {\r\n        if(value.trim() !== \"\"){\r\n            props.addItem(value);\r\n            setValue(\"\");\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n\r\n    let onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if(e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <TextField variant=\"outlined\"\r\n            value={value}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            error={!!error}\r\n            label=\"Title\"\r\n            helperText={error}/>\r\n            {/* <Button variant=\"contained\" color=\"primary\" onClick={addItem}>+</Button> */}\r\n            <IconButton color=\"primary\" onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;","import { TextField } from \"@material-ui/core\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState<string>(props.value)\r\n    function doubleClickHandler() {\r\n        setEditMode(true);\r\n    }\r\n\r\n    function activateViewMode() {\r\n        setEditMode(false)\r\n        props.onChange(title);\r\n    }\r\n    \r\n    function changeTitle(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    return(\r\n        editMode ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/> :\r\n        <span onDoubleClick={doubleClickHandler}>{props.value}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan;","import { Button, Checkbox, IconButton } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\nimport { FilterValuesType, TaskType } from \"./App\";\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport EditableSpan from \"./components/EditableSpan\";\r\nimport { MapTasks } from \"./MapTasks\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (isDone: boolean, taskID: string, todolistID: string) => void\r\n    deleteTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (title: string, taskID: string, todolistID: string) => void\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\n\r\nexport const Todolist = (props: PropsType) => {\r\n    \r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null);\r\n    let mappedTasks = props.tasks.map(t => {\r\n\r\n        const onClickHandler = () => {props.removeTask(t.id, props.id)}\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            props.changeTaskStatus(newIsDoneValue, t.id, props.id)\r\n        }\r\n        const onChangeForSpan = (title: string) => {\r\n            props.changeTaskTitle(title, t.id, props.id);\r\n        } \r\n\r\n     return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n        {/* <input type=\"checkbox\" checked={t.isDone} onChange={onChangeHandler}/> */}\r\n        <Checkbox\r\n        checked={t.isDone}\r\n        color=\"primary\"\r\n        onChange={onChangeHandler}/>\r\n        <EditableSpan value={t.title} onChange={onChangeForSpan}/>\r\n        {/* <span>{t.title}</span> */}\r\n        {/* <button onClick={onClickHandler}>x</button> */}\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </li>\r\n    })\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const onChangeHandlerTodolist = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.deleteTodolist(props.id);\r\n    }\r\n\r\n    const onAllClickHandler = () => {props.changeFilter(\"all\", props.id)}\r\n    const onCompletedClickHandler = () => {props.changeFilter(\"completed\", props.id)}\r\n    const onActiveClickHandler = () => {props.changeFilter(\"active\", props.id)}\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan value={props.title} onChange={onChangeHandlerTodolist}/>\r\n            {/* <button onClick={() => props.deleteTodolist(props.id)}>x</button> */}\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n            </h3>\r\n            <div>\r\n                <AddItemForm addItem={addTask} />\r\n            </div>\r\n            {mappedTasks}\r\n            <div>\r\n                <Button onClick={onAllClickHandler} className={props.filter === \"all\" ? \"active-filter\" : \"\"} color=\"primary\" variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}>All</Button>\r\n                <Button onClick={onActiveClickHandler} className={props.filter === \"active\" ? \"active-filter\" : \"\"} color=\"primary\" variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}>Active</Button>\r\n                <Button onClick={onCompletedClickHandler} className={props.filter === \"completed\" ? \"active-filter\" : \"\"} color=\"primary\" variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport AddItemForm from './components/AddItemForm';\r\nimport { Todolist } from './Todolist';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolits] = useState<Array<TodolistType>>([\r\n        { id: todolistID1, title: \"What to learn\", filter: \"all\" },\r\n        { id: todolistID2, title: \"What to buy\", filter: \"all\" },\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistID1]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"Angular\", isDone: false },\r\n            { id: v1(), title: \"React\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true }\r\n        ],\r\n        [todolistID2]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"Angular\", isDone: false },\r\n            { id: v1(), title: \"React\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true }\r\n        ]\r\n    })\r\n\r\n    function removeTask(taskID: string, todolistID: string) {\r\n        let todolistTasks = tasks[todolistID];\r\n        tasks[todolistID] = todolistTasks.filter(t => t.id !== taskID);\r\n        setTasks({ ...tasks });\r\n    }\r\n\r\n    function changeFilter(filter: FilterValuesType, todolistID: string) {\r\n        let todolist = todolists.find(t => t.id === todolistID)\r\n        if (todolist) {\r\n            todolist.filter = filter;\r\n            setTodolits([...todolists])\r\n        }\r\n    }\r\n\r\n    function addTask(title: string, todolistID: string) {\r\n        let task = { id: v1(), title: title, isDone: false };\r\n        let todolistTasks = tasks[todolistID];\r\n        tasks[todolistID] = [task, ...todolistTasks]\r\n        setTasks({ ...tasks })\r\n    }\r\n\r\n    function changeTaskStatus(isDone: boolean, taskID: string, todolistID: string) {\r\n        let todolistTasks = tasks[todolistID];\r\n        let task = todolistTasks.find(t => t.id === taskID);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({ ...tasks })\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(title: string, taskID: string, todolistID: string) {\r\n        let todolistTasks = tasks[todolistID];\r\n        let task = todolistTasks.find(t => t.id === taskID);\r\n        if (task) {\r\n            task.title = title;\r\n            setTasks({ ...tasks })\r\n        }\r\n    }\r\n\r\n    function deleteTodolist(todolistID: string) {\r\n        setTodolits(todolists.filter(t => t.id !== todolistID));\r\n        delete tasks[todolistID];\r\n        setTasks({ ...tasks })\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolistID = v1();\r\n        setTodolits([{ id: newTodolistID, title: title, filter: \"all\" }, ...todolists]);\r\n        setTasks({ ...tasks, [newTodolistID]: [] })\r\n    }\r\n\r\n    function changeTodolistTitle(title: string, todolistID: string) {\r\n        let todolist = todolists.find(t => t.id === todolistID);\r\n        if (todolist) {\r\n            todolist.title = title;\r\n            setTodolits([...todolists])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color='inherit' aria-label='menu'>\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant='h6'>\r\n                        News\r\n                    </Typography>\r\n                    <Button color='inherit'>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist} />\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTasksForTodolist = tasks[tl.id]\r\n                            let tasksForTodolist = allTasksForTodolist;\r\n\r\n                            switch (tl.filter) {\r\n                                case \"active\": {\r\n                                    tasksForTodolist = tasksForTodolist.filter(t => !t.isDone)\r\n                                    break\r\n                                }\r\n                                case \"completed\": {\r\n                                    tasksForTodolist = tasksForTodolist.filter(t => t.isDone)\r\n                                    break\r\n                                }\r\n                                default: tasksForTodolist = allTasksForTodolist;\r\n                            }\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        filter={tl.filter}\r\n                                        deleteTodolist={deleteTodolist}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        changeTaskTitle={changeTaskTitle} />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}