{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/TodolistsList/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setTodolistEntityStatusAC","entityStatus","setTaskEntityStatusAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","result","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93e54e42.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\nimport { RequestStatusType } from '../app/app-reducer';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a51c385e-38b4-45b2-933a-739b6104467f'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>(`/auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, login: string, email: string} | {}>>('/auth/me')\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: boolean\r\n}\r\n\r\nexport type LogoutResponseType = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: {}\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n} \r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { setAppErrorAC, SetAppErrorACType, setAppStatusAC, SetAppStatusACType } from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n   if (data.messages.length) {\r\n       dispatch(setAppErrorAC(data.messages[0]))\r\n   } else {\r\n       dispatch(setAppErrorAC('Some error occurred'))\r\n   }\r\n   dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n   dispatch(setAppErrorAC(error.message))\r\n   dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorACType | SetAppStatusACType>","import { Dispatch } from 'redux'\r\nimport { authAPI, LoginParamsType } from '../../api/todolists-api'\r\nimport { SetAppErrorACType, setAppStatusAC, SetAppStatusACType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from './../../utils/error-utils';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return { ...state, isLoggedIn: action.value }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then((result) => {\r\n            if (result.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n            } else {\r\n                handleServerAppError(result.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\nexport const logOutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout().then((result) => {\r\n        if(result.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(false));\r\n            dispatch(setAppStatusAC(\"succeeded\"));\r\n        } else {\r\n            handleServerAppError(result.data, dispatch);\r\n        }\r\n    })\r\n    .catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n    })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusACType | SetAppErrorACType","import { Dispatch } from \"redux\";\r\nimport { authAPI } from \"../api/todolists-api\";\r\nimport { setIsLoggedInAC } from \"../features/TodolistsList/auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type ErrorType = string | null;\r\nconst initialState = {\r\n    status: \"loading\" as RequestStatusType,\r\n    error: null as ErrorType,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\": {\r\n            return {...state, status: action.status}\r\n        } \r\n        case \"APP/SET-ERROR\": {\r\n            return {...state, error: action.error}\r\n        } \r\n        case \"APP/SET-IS-INITIALIZED\": {\r\n            return {...state, isInitialized: action.isInitialized}\r\n        } \r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\ntype ActionsType = SetAppStatusACType | SetAppErrorACType | SetIsInitializedACType;\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: \"APP/SET-STATUS\",\r\n        status\r\n    } as const\r\n}\r\n\r\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>\r\n\r\nexport const setAppErrorAC = (error: ErrorType) => {\r\n    return {\r\n        type: \"APP/SET-ERROR\",\r\n        error\r\n    } as const\r\n}\r\n\r\nexport type SetAppErrorACType = ReturnType<typeof setAppErrorAC>\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {\r\n        type: \"APP/SET-IS-INITIALIZED\",\r\n        isInitialized\r\n    } as const\r\n}\r\n\r\nexport type SetIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then((result) => {\r\n        debugger\r\n        dispatch(setIsInitializedAC(true))\r\n        if(result.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n\r\n        }\r\n    })\r\n}","import { todolistsAPI, TodolistType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { RequestStatusType, setAppErrorAC, SetAppErrorACType, setAppStatusAC, SetAppStatusACType } from '../../app/app-reducer'\r\nimport { handleServerNetworkError } from '../../utils/error-utils'\r\nimport { handleServerAppError } from './../../utils/error-utils';\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{ ...action.todolist, filter: 'all', entityStatus: \"succeeded\" }, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, title: action.title } : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, filter: action.filter } : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: \"succeeded\" }))\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.entityStatus } : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: 'SET-TODOLISTS', todolists } as const)\r\n\r\nexport const setTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: \"CHANGE-TODOLIST-ENTITY-STATUS\",\r\n        id,\r\n        entityStatus\r\n    } as const\r\n}\r\n\r\nexport type SetTodolistEntityStatusACType = ReturnType<typeof setTodolistEntityStatusAC>\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    dispatch(setTodolistsAC(res.data));\r\n                    dispatch(setAppStatusAC(\"succeeded\"));\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        dispatch(setTodolistEntityStatusAC(todolistId, \"loading\"))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId));\r\n                    dispatch(setAppStatusAC(\"succeeded\"));\r\n                    dispatch(setTodolistEntityStatusAC(todolistId, \"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item));\r\n                    dispatch(setAppStatusAC(\"succeeded\"));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        dispatch(setTodolistEntityStatusAC(id, \"loading\"));\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(id, title));\r\n                    dispatch(setAppStatusAC(\"succeeded\"));\r\n                    dispatch(setTodolistEntityStatusAC(id, \"succeeded\"));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppStatusACType\r\n    | SetAppErrorACType\r\n    | SetTodolistEntityStatusACType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskDomainType, TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { RequestStatusType, setAppErrorAC, SetAppErrorACType, setAppStatusAC, SetAppStatusACType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from './../../utils/error-utils';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [{ ...action.task, entityStatus: \"succeeded\" }, ...state[action.task.todoListId]] }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? { ...t, ...action.model } : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = { ...state }\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = { ...state }\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"CHANGE-TASK-ENTITY-STATUS\": {\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(task => task.id === action.id ? {...task, entityStatus: action.entityStatus} : task)};\r\n        }\r\n        case 'SET-TASKS':\r\n            return { ...state, [action.todolistId]: action.tasks.map(task => ({ ...task, entityStatus: \"succeeded\" })) }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({ type: 'REMOVE-TASK', taskId, todolistId } as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({ type: 'UPDATE-TASK', model, todolistId, taskId } as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({ type: 'SET-TASKS', tasks, todolistId } as const)\r\nexport const setTaskEntityStatusAC = (todolistId: string, id: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: \"CHANGE-TASK-ENTITY-STATUS\",\r\n        id,\r\n        todolistId,\r\n        entityStatus\r\n    } as const\r\n}\r\n\r\nexport type SetTaskEntityStatusACType = ReturnType<typeof setTaskEntityStatusAC>\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            if (res.data.error === null) {\r\n                const tasks = res.data.items;\r\n                const action = setTasksAC(tasks, todolistId);\r\n                dispatch(action);\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(setTaskEntityStatusAC(todolistId, taskId, \"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = removeTaskAC(taskId, todolistId);\r\n                dispatch(action);\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n                dispatch(setTaskEntityStatusAC(todolistId, taskId, \"succeeded\"));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        dispatch(setTaskEntityStatusAC(todolistId, taskId, \"loading\"))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId);\r\n                    dispatch(action);\r\n                    dispatch(setAppStatusAC(\"succeeded\"));\r\n                    dispatch(setTaskEntityStatusAC(todolistId, taskId, \"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppStatusACType\r\n    | SetAppErrorACType\r\n    | SetTaskEntityStatusACType\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        if (!props.disabled) {\r\n            setEditMode(true);\r\n            setTitle(props.value);\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskDomainType, TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskDomainType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} disabled={props.task.entityStatus === \"loading\"}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { TaskDomainType, TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { RequestStatusType } from '../../../app/app-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    entityStatus: RequestStatusType\r\n    title: string\r\n    tasks: Array<TaskDomainType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} disabled={props.entityStatus === \"loading\"}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { Navigate } from 'react-router-dom'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        debugger\r\n        return <Navigate to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                entityStatus={tl.entityStatus}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { ErrorType, setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n   props, ref) {\r\n   return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n   const [open, setOpen] = useState(true);\r\n   const dispatch = useDispatch();\r\n   const error = useSelector<AppRootStateType, ErrorType>(state => state.app.error)\r\n\r\n   const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n       if (reason === 'clickaway') {\r\n           return;\r\n       }\r\n       dispatch(setAppErrorAC(null));\r\n   };\r\n\r\n   return (\r\n       <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n           <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n               {error}\r\n           </Alert>\r\n       </Snackbar>\r\n   );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from '../TodolistsList/auth-reducer';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n }\r\n \r\n\r\nexport const Login = () => {\r\n    let dispatch = useDispatch();\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            } else if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Too short!\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values));\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'} control={\r\n                            <Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")} />\r\n                        } />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport { Menu } from '@mui/icons-material';\r\nimport { CircularProgress, LinearProgress } from '@mui/material';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppRootStateType } from './store';\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport { Navigate, Route, Routes } from 'react-router-dom';\r\nimport { Login } from '../features/Login/Login';\r\nimport { logOutTC } from '../features/TodolistsList/auth-reducer';\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    let status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    let isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    let logoutClickHandler = () => {\r\n        dispatch(logOutTC());\r\n    }\r\n    \r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n     }\r\n     \r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                    {isLoggedIn && <Button color='inherit' onClick={logoutClickHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/*\" element={<Navigate to={\"/404\"}/>}/>\r\n                    <Route path=\"/404\" element={<h1>Page not found</h1>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer';\r\nimport { authReducer } from './../features/TodolistsList/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}