{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","mappedTasks","tasks","map","t","key","id","className","isDone","type","checked","onChange","e","newIsDoneValue","currentTarget","changeTaskStatus","onClick","removeTask","addTask","trim","deleteTodolist","value","onKeyPress","charCode","changeFilter","filter","App","todolistID1","v1","todolistID2","todolists","setTodolits","setTasks","taskID","todolistID","todolistTasks","todolist","find","task","tl","allTasksForTodolist","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.22e3a6d8.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\nimport { FilterValuesType, TaskType } from \"./App\";\r\nimport { MapTasks } from \"./MapTasks\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (isDone: boolean, taskID: string, todolistID: string) => void\r\n    deleteTodolist: (todolistID: string) => void\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\n\r\nexport const Todolist = (props: PropsType) => {\r\n    \r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null);\r\n    let mappedTasks = props.tasks.map(t => {\r\n\r\n        const onClickHandler = () => {props.removeTask(t.id, props.id)}\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            props.changeTaskStatus(newIsDoneValue, t.id, props.id)\r\n        } \r\n\r\n     return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n        <input type=\"checkbox\" checked={t.isDone} onChange={onChangeHandler}/>\r\n        <span>{t.title}</span>\r\n        <button onClick={onClickHandler}>x</button>\r\n    </li>\r\n    })\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(title, props.id);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    const onAllClickHandler = () => {props.changeFilter(\"all\", props.id)}\r\n    const onCompletedClickHandler = () => {props.changeFilter(\"completed\", props.id)}\r\n    const onActiveClickHandler = () => {props.changeFilter(\"active\", props.id)}\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}<button onClick={() => props.deleteTodolist(props.id)}>x</button></h3>\r\n            <div>\r\n                <input value={title} \r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                className={error ? \"error\" : \"\"}/>\r\n                <button onClick={addTask}>+</button>\r\n                {error && <div className=\"error-message\">{error}</div>}\r\n            </div>\r\n            {mappedTasks}\r\n            <div>\r\n                <button onClick={onAllClickHandler} className={props.filter === \"all\" ? \"active-filter\" : \"\"}>All</button>\r\n                <button onClick={onActiveClickHandler} className={props.filter === \"active\" ? \"active-filter\" : \"\"}>Active</button>\r\n                <button onClick={onCompletedClickHandler} className={props.filter === \"completed\" ? \"active-filter\" : \"\"}>Completed</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string] : Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolits] = useState<Array<TodolistType>>([\r\n        { id: todolistID1, title: \"What to learn\", filter: \"all\" },\r\n        { id: todolistID2, title: \"What to buy\", filter: \"all\" },\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistID1]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"Angular\", isDone: false },\r\n            { id: v1(), title: \"React\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true }\r\n        ],\r\n        [todolistID2]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"Angular\", isDone: false },\r\n            { id: v1(), title: \"React\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true }\r\n        ]\r\n    })\r\n\r\n    function removeTask(taskID: string, todolistID: string) {\r\n        let todolistTasks = tasks[todolistID];\r\n        tasks[todolistID] = todolistTasks.filter(t => t.id !== taskID);\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(filter: FilterValuesType, todolistID: string) {\r\n        let todolist = todolists.find(t => t.id === todolistID)\r\n        if (todolist) {\r\n            todolist.filter = filter;\r\n            setTodolits([...todolists])\r\n        }\r\n    }\r\n\r\n    function addTask(title: string, todolistID: string) {\r\n        let task = { id: v1(), title: title, isDone: false };\r\n        let todolistTasks = tasks[todolistID];\r\n        tasks[todolistID] = [task, ...todolistTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskStatus(isDone: boolean, taskID: string, todolistID: string) {\r\n        let todolistTasks = tasks[todolistID];\r\n        let task = todolistTasks.find(t => t.id === taskID);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function deleteTodolist(todolistID: string) {\r\n        setTodolits(todolists.filter(t => t.id !== todolistID));\r\n        delete tasks[todolistID];\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTasksForTodolist = tasks[tl.id]\r\n                    let tasksForTodolist = allTasksForTodolist;\r\n\r\n                    switch (tl.filter) {\r\n                        case \"active\": {\r\n                            tasksForTodolist = tasksForTodolist.filter(t => !t.isDone)\r\n                            break\r\n                        }\r\n                        case \"completed\": {\r\n                            tasksForTodolist = tasksForTodolist.filter(t => t.isDone)\r\n                            break\r\n                        }\r\n                        default: tasksForTodolist = allTasksForTodolist;\r\n                    }\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        filter={tl.filter}\r\n                        deleteTodolist={deleteTodolist} />\r\n                })\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}