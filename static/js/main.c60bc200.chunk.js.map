{"version":3,"sources":["serviceWorker.ts","components/AddItemForm.tsx","state/tasks-reducer.ts","state/todolist-reducer.ts","components/EditableSpan.tsx","components/Task.tsx","Todolist.tsx","AppWIthRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","value","setValue","error","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","initialState","EditableSpan","editMode","setEditMode","title","setTitle","autoFocus","onBlur","onDoubleClick","Task","onChangeForSpan","useCallback","changeTaskTitle","task","id","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","removeTask","Delete","Todolist","tasksForTodolist","tasks","filter","t","mappedTasks","map","addTask","onChangeHandlerTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onCompletedClickHandler","onActiveClickHandler","deleteTodolist","Button","style","margin","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","taskID","todolistID","action","type","RemoveTaskAC","newFilter","ChangeTodolistFilterAC","AddTaskAC","ChangeTaskStatusAC","ChangeTaskTitleAC","RemoveTodolistAC","addTodolist","todolistId","v1","AddTodolistAC","newTitle","ChangeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","newState","unshift","newTodolistID","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c60bc200.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {IconButton, TextField } from \"@material-ui/core\";\r\nimport { AddBox } from \"@material-ui/icons\";\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log(\"Add Item Form\");\r\n    \r\n    let [value, setValue] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    let onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value);\r\n    }\r\n\r\n    let addItem = () => {\r\n        if(value.trim() !== \"\"){\r\n            props.addItem(value);\r\n            setValue(\"\");\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n\r\n    let onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null)\r\n        }\r\n        if(e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <TextField variant=\"outlined\"\r\n            value={value}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            error={!!error}\r\n            label=\"Title\"\r\n            helperText={error}/>\r\n            {/* <Button variant=\"contained\" color=\"primary\" onClick={addItem}>+</Button> */}\r\n            <IconButton color=\"primary\" onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm;","import { TasksStateType } from \"../App\";\r\nimport { v1 } from 'uuid';\r\nimport { AddTodolistActionType, RemoveTodolistActionType } from \"./todolist-reducer\";\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            let newState = {...state};\r\n            let tasks = newState[action.todolistID].filter(t => t.id !== action.id);\r\n            return {...newState, [action.todolistID]: tasks};\r\n        case \"ADD-TASK\" : {\r\n            let newState = {...state};\r\n            let task = {id: v1(), title: action.title, isDone: false};\r\n            newState[action.todolistID].unshift(task);\r\n            newState[action.todolistID] = [...newState[action.todolistID]]\r\n            return newState;\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let newState = {...state};\r\n            newState[action.todolistID] = newState[action.todolistID].map(t => t.id === action.taskID ? {...t, isDone: action.isDone} : t)\r\n            return newState;\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let newState = {...state};\r\n            newState[action.todolistID] = newState[action.todolistID].map(t => t.id === action.taskID ? {...t, title: action.title} : t)\r\n            return newState;\r\n        }\r\n        case \"ADD-TODOLIST\" : {\r\n            let newState = {...state};\r\n            let newTodolistID = action.todolistId;\r\n            newState = {...newState, [newTodolistID]: []};\r\n            return newState;\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let newState = {...state};\r\n            delete newState[action.id];\r\n            return newState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type ActionsType = RemoveTaskActionType | AddTaskActionType | ChangeTaskStatusActionType | ChangeTaskTitleActionType | AddTodolistActionType | RemoveTodolistActionType;\r\n\r\nexport function RemoveTaskAC(taskID: string, todolistID: string):RemoveTaskActionType {\r\n    return {\r\n        type: \"REMOVE-TASK\",\r\n        id: taskID,\r\n        todolistID \r\n    }\r\n}\r\nexport type RemoveTaskActionType = {\r\n    type: \"REMOVE-TASK\"\r\n    id: string\r\n    todolistID: string\r\n}\r\n\r\nexport function AddTaskAC(title: string, todolistID: string): AddTaskActionType {\r\n    return {\r\n        type: \"ADD-TASK\",\r\n        title: title,\r\n        todolistID: todolistID\r\n    }\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: \"ADD-TASK\"\r\n    title: string\r\n    todolistID: string\r\n} \r\n\r\n\r\nexport function ChangeTaskStatusAC(taskID: string, isDone: boolean, todolistID: string): ChangeTaskStatusActionType {\r\n    return {\r\n        type: \"CHANGE-TASK-STATUS\",\r\n        todolistID: todolistID,\r\n        taskID: taskID,\r\n        isDone: isDone\r\n    }\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    todolistID: string\r\n    taskID: string\r\n    isDone: boolean\r\n}\r\n\r\nexport function ChangeTaskTitleAC(taskID: string, title: string, todolistID: string): ChangeTaskTitleActionType {\r\n    return {\r\n        type: \"CHANGE-TASK-TITLE\",\r\n        todolistID: todolistID,\r\n        taskID: taskID,\r\n        title: title\r\n    }\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    todolistID: string\r\n    taskID: string\r\n    title: string\r\n}\r\n\r\n","import { v1 } from \"uuid\"\r\nimport { FilterValuesType, TodolistType } from \"../App\"\r\n\r\nconst initialState: Array<TodolistType> =  [];\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            let newState = [...state];\r\n            return newState.filter(t => t.id !== action.id);\r\n        case \"ADD-TODOLIST\": {\r\n            let newState = [...state];\r\n            return [...newState, {id: action.todolistId, title: action.title, filter: \"all\"}];\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            let newState = [...state];\r\n            let todolist = newState.find(t => t.id === action.id);\r\n            if(todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return newState;\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            let newState = [...state];\r\n            let todolist = newState.find(t => t.id === action.id);\r\n            if(todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return newState;\r\n        }   \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type ActionsType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistFilterActionType | ChangeTodolistTitleActionType;\r\n\r\nexport function RemoveTodolistAC(todolistID: string):RemoveTodolistActionType {\r\n    return {\r\n        type: \"REMOVE-TODOLIST\",\r\n        id: todolistID\r\n    }\r\n}\r\nexport type RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    id: string\r\n}\r\n\r\nexport function AddTodolistAC(title: string): AddTodolistActionType {\r\n    return {\r\n        type: \"ADD-TODOLIST\",\r\n        title: title,\r\n        todolistId: v1()\r\n    }\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todolistId: string\r\n} \r\n\r\nexport function ChangeTodolistTitleAC(todolistID: string, newTitle: string): ChangeTodolistTitleActionType {\r\n    return {\r\n        type: \"CHANGE-TODOLIST-TITLE\",\r\n        id: todolistID,\r\n        title: newTitle\r\n    }\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport function ChangeTodolistFilterAC(todolistID: string, newFilter: FilterValuesType): ChangeTodolistFilterActionType {\r\n    return {\r\n        type: \"CHANGE-TODOLIST-FILTER\",\r\n        id: todolistID,\r\n        filter: newFilter\r\n    }\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    id: string\r\n    filter: FilterValuesType\r\n}","import { TextField } from \"@material-ui/core\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log(\"EditableSpan\");\r\n    \r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState<string>(props.value)\r\n    function doubleClickHandler() {\r\n        setEditMode(true);\r\n    }\r\n\r\n    function activateViewMode() {\r\n        setEditMode(false)\r\n        props.onChange(title);\r\n    }\r\n    \r\n    function changeTitle(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    return(\r\n        editMode ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/> :\r\n        <span onDoubleClick={doubleClickHandler}>{props.value}</span>\r\n    )\r\n});\r\nexport default EditableSpan;","import {Checkbox, IconButton } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport React, { ChangeEvent, useCallback } from \"react\";\r\nimport { TaskType } from \"../App\";\r\nimport EditableSpan from \"./EditableSpan\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskTitle: (title: string, taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (isDone: boolean, taskID: string, todolistID: string) => void\r\n    task: TaskType\r\n    id: string\r\n}\r\n\r\nconst Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => { props.removeTask(props.task.id, props.id) }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(newIsDoneValue, props.task.id, props.id)\r\n    }\r\n    const onChangeForSpan = useCallback((title: string) => {\r\n        props.changeTaskTitle(title, props.task.id, props.id);\r\n    },[props.changeTaskTitle, props.task.id, props.id])\r\n\r\n    return <li key={props.task.id} className={props.task.isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler} />\r\n        <EditableSpan value={props.task.title} onChange={onChangeForSpan} />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </li>\r\n});\r\n\r\nexport default Task;","import { Button, IconButton } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport React, {useCallback, useState } from \"react\";\r\nimport { FilterValuesType, TaskType } from \"./App\";\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport EditableSpan from \"./components/EditableSpan\";\r\nimport Task from \"./components/Task\";\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (isDone: boolean, taskID: string, todolistID: string) => void\r\n    deleteTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (title: string, taskID: string, todolistID: string) => void\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log(\"todo\");\r\n    let tasksForTodolist = props.tasks;\r\n        if(props.filter === \"active\") {\r\n            tasksForTodolist = tasksForTodolist.filter(t => !t.isDone)\r\n        }\r\n        if(props.filter === \"completed\") {\r\n            tasksForTodolist = tasksForTodolist.filter(t => t.isDone)\r\n        }\r\n    let mappedTasks = tasksForTodolist.map(t => <Task key={t.id} task={t} removeTask={props.removeTask}  changeTaskStatus={props.changeTaskStatus} changeTaskTitle={props.changeTaskTitle} id={props.id}/>)\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    },[props.addTask, props.id]);\r\n\r\n    const onChangeHandlerTodolist = useCallback((title: string) => {\r\n        props.changeTodolistTitle(title, props.id);\r\n    }, [props.changeTodolistTitle, props.id]);\r\n\r\n    const removeTodolist = () => {\r\n        props.deleteTodolist(props.id);\r\n    }\r\n\r\n    const onAllClickHandler = useCallback(() => {props.changeFilter(\"all\", props.id)},[props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => {props.changeFilter(\"completed\", props.id)},[props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => {props.changeFilter(\"active\", props.id)},[props.changeFilter, props.id]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan value={props.title} onChange={onChangeHandlerTodolist}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n            </h3>\r\n            <div>\r\n                <AddItemForm addItem={addTask} />\r\n            </div>\r\n            {mappedTasks}\r\n            <div>\r\n                <Button onClick={onAllClickHandler} className={props.filter === \"all\" ? \"active-filter\" : \"\"} color=\"primary\" variant={props.filter === \"all\" ? \"contained\" : \"outlined\"} style={{margin: \"10px 5px 10px 0\"}}>All</Button>\r\n                <Button onClick={onActiveClickHandler} className={props.filter === \"active\" ? \"active-filter\" : \"\"} color=\"primary\" variant={props.filter === \"active\" ? \"contained\" : \"outlined\"} style={{margin: \"10px 5px 10px 0\"}}>Active</Button>\r\n                <Button onClick={onCompletedClickHandler} className={props.filter === \"completed\" ? \"active-filter\" : \"\"} color=\"primary\" variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"} style={{margin: \"10px 0px 10px 0\"}}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport React, { useCallback} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './App.css';\r\nimport AddItemForm from './components/AddItemForm';\r\nimport { AppRootStateType } from './state/store';\r\nimport { AddTaskAC, ChangeTaskStatusAC, ChangeTaskTitleAC, RemoveTaskAC} from './state/tasks-reducer';\r\nimport { AddTodolistAC, ChangeTodolistFilterAC, ChangeTodolistTitleAC, RemoveTodolistAC} from './state/todolist-reducer';\r\n\r\nimport { Todolist } from './Todolist';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction AppWithRedux() {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback((taskID: string, todolistID: string) => { \r\n        let action = RemoveTaskAC(taskID, todolistID);\r\n        dispatch(action);\r\n    },[dispatch]);\r\n\r\n    const changeFilter = useCallback((filter: FilterValuesType, todolistID: string) => {\r\n        let action = ChangeTodolistFilterAC(todolistID, filter);\r\n        dispatch(action);\r\n    },[dispatch]);\r\n\r\n    const addTask = useCallback((title: string, todolistID: string) => {\r\n        let action = AddTaskAC(title, todolistID);\r\n        dispatch(action);\r\n    },[dispatch]);\r\n\r\n    const changeTaskStatus = useCallback((isDone: boolean, taskID: string, todolistID: string) => {\r\n        let action = ChangeTaskStatusAC(taskID, isDone, todolistID);\r\n        dispatch(action);\r\n    },[dispatch]);\r\n\r\n    const changeTaskTitle = useCallback((title: string, taskID: string, todolistID: string) => {\r\n        let action = ChangeTaskTitleAC(taskID, title, todolistID);\r\n        dispatch(action);\r\n    },[dispatch]);\r\n\r\n    const deleteTodolist = useCallback((todolistID: string) => {\r\n        let action = RemoveTodolistAC(todolistID);\r\n        dispatch(action);\r\n    },[dispatch]);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        let action = AddTodolistAC(title);\r\n        dispatch(action);\r\n    },[dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todolistID: string) => {\r\n        let action = ChangeTodolistTitleAC(todolistID, title);\r\n        dispatch(action);\r\n    },[dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color='inherit' aria-label='menu'>\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant='h6'>\r\n                        News\r\n                    </Typography>\r\n                    <Button color='inherit'>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist} />\r\n                </Grid>\r\n                <Grid container spacing={2}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTasksForTodolist = tasks[tl.id]\r\n                            let tasksForTodolist = allTasksForTodolist;\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        filter={tl.filter}\r\n                                        deleteTodolist={deleteTodolist}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        changeTaskTitle={changeTaskTitle} />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolist-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n   tasks: tasksReducer,\r\n   todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducers from './AppWIthReducers';\r\nimport AppWithRedux from './AppWIthRedux';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './state/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}