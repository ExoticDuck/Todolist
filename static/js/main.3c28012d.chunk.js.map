{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","value","setValue","error","setError","addItem","trim","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","editMode","setEditMode","title","setTitle","autoFocus","onBlur","onDoubleClick","Todolist","mappedTasks","tasks","map","t","key","id","isDone","type","checked","newIsDoneValue","changeTaskStatus","changeTaskTitle","removeTask","changeTodolistTitle","deleteTodolist","addTask","changeFilter","filter","App","todolistID1","v1","todolistID2","todolists","setTodolits","setTasks","taskID","todolistID","todolistTasks","todolist","find","task","newTodolistID","tl","allTasksForTodolist","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3c28012d.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    let [value, setValue] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    let onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value);\r\n    }\r\n\r\n    let addItem = () => {\r\n        if(value.trim() !== \"\"){\r\n            props.addItem(value);\r\n            setValue(\"\");\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n\r\n    let onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if(e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <input\r\n            value={value}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            className={error ? \"error\" : \"\"}/>\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;","import React, { ChangeEvent, useState } from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState<string>(props.value)\r\n    function doubleClickHandler() {\r\n        setEditMode(true);\r\n    }\r\n\r\n    function activateViewMode() {\r\n        setEditMode(false)\r\n        props.onChange(title);\r\n    }\r\n    \r\n    function changeTitle(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    return(\r\n        editMode ? <input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/> :\r\n        <span onDoubleClick={doubleClickHandler}>{props.value}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan;","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\nimport { FilterValuesType, TaskType } from \"./App\";\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport EditableSpan from \"./components/EditableSpan\";\r\nimport { MapTasks } from \"./MapTasks\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (isDone: boolean, taskID: string, todolistID: string) => void\r\n    deleteTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (title: string, taskID: string, todolistID: string) => void\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n    filter: FilterValuesType\r\n    id: string\r\n}\r\n\r\nexport const Todolist = (props: PropsType) => {\r\n    \r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null);\r\n    let mappedTasks = props.tasks.map(t => {\r\n\r\n        const onClickHandler = () => {props.removeTask(t.id, props.id)}\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            props.changeTaskStatus(newIsDoneValue, t.id, props.id)\r\n        }\r\n        const onChangeForSpan = (title: string) => {\r\n            props.changeTaskTitle(title, t.id, props.id);\r\n        } \r\n\r\n     return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n        <input type=\"checkbox\" checked={t.isDone} onChange={onChangeHandler}/>\r\n        <EditableSpan value={t.title} onChange={onChangeForSpan}/>\r\n        {/* <span>{t.title}</span> */}\r\n        <button onClick={onClickHandler}>x</button>\r\n    </li>\r\n    })\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const onChangeHandlerTodolist = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id);\r\n    }\r\n\r\n    const onAllClickHandler = () => {props.changeFilter(\"all\", props.id)}\r\n    const onCompletedClickHandler = () => {props.changeFilter(\"completed\", props.id)}\r\n    const onActiveClickHandler = () => {props.changeFilter(\"active\", props.id)}\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan value={props.title} onChange={onChangeHandlerTodolist}/><button onClick={() => props.deleteTodolist(props.id)}>x</button></h3>\r\n            <div>\r\n                <AddItemForm addItem={addTask} />\r\n            </div>\r\n            {mappedTasks}\r\n            <div>\r\n                <button onClick={onAllClickHandler} className={props.filter === \"all\" ? \"active-filter\" : \"\"}>All</button>\r\n                <button onClick={onActiveClickHandler} className={props.filter === \"active\" ? \"active-filter\" : \"\"}>Active</button>\r\n                <button onClick={onCompletedClickHandler} className={props.filter === \"completed\" ? \"active-filter\" : \"\"}>Completed</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport AddItemForm from './components/AddItemForm';\r\nimport { Todolist } from './Todolist';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string] : Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolits] = useState<Array<TodolistType>>([\r\n        { id: todolistID1, title: \"What to learn\", filter: \"all\" },\r\n        { id: todolistID2, title: \"What to buy\", filter: \"all\" },\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistID1]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"Angular\", isDone: false },\r\n            { id: v1(), title: \"React\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true }\r\n        ],\r\n        [todolistID2]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"Angular\", isDone: false },\r\n            { id: v1(), title: \"React\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true }\r\n        ]\r\n    })\r\n\r\n    function removeTask(taskID: string, todolistID: string) {\r\n        let todolistTasks = tasks[todolistID];\r\n        tasks[todolistID] = todolistTasks.filter(t => t.id !== taskID);\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(filter: FilterValuesType, todolistID: string) {\r\n        let todolist = todolists.find(t => t.id === todolistID)\r\n        if (todolist) {\r\n            todolist.filter = filter;\r\n            setTodolits([...todolists])\r\n        }\r\n    }\r\n\r\n    function addTask(title: string, todolistID: string) {\r\n        let task = { id: v1(), title: title, isDone: false };\r\n        let todolistTasks = tasks[todolistID];\r\n        tasks[todolistID] = [task, ...todolistTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskStatus(isDone: boolean, taskID: string, todolistID: string) {\r\n        let todolistTasks = tasks[todolistID];\r\n        let task = todolistTasks.find(t => t.id === taskID);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(title: string, taskID: string, todolistID: string) {\r\n        let todolistTasks = tasks[todolistID];\r\n        let task = todolistTasks.find(t => t.id === taskID);\r\n        if(task) {\r\n            task.title = title;\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function deleteTodolist(todolistID: string) {\r\n        setTodolits(todolists.filter(t => t.id !== todolistID));\r\n        delete tasks[todolistID];\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolistID = v1();\r\n        setTodolits([{ id: newTodolistID, title: title, filter: \"all\" }, ...todolists]);\r\n        setTasks({...tasks, [newTodolistID]: []})\r\n    }\r\n\r\n    function changeTodolistTitle(title: string, todolistID: string) {\r\n        let todolist = todolists.find(t => t.id === todolistID);\r\n        if(todolist) {\r\n            todolist.title = title;\r\n            setTodolits([...todolists])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodolist}/>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTasksForTodolist = tasks[tl.id]\r\n                    let tasksForTodolist = allTasksForTodolist;\r\n\r\n                    switch (tl.filter) {\r\n                        case \"active\": {\r\n                            tasksForTodolist = tasksForTodolist.filter(t => !t.isDone)\r\n                            break\r\n                        }\r\n                        case \"completed\": {\r\n                            tasksForTodolist = tasksForTodolist.filter(t => t.isDone)\r\n                            break\r\n                        }\r\n                        default: tasksForTodolist = allTasksForTodolist;\r\n                    }\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        filter={tl.filter}\r\n                        deleteTodolist={deleteTodolist}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                        changeTaskTitle={changeTaskTitle} />\r\n                })\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}